	Agenda:
=======
- Tags in docker images
- commands for checking information / details of containers
  logs, inspect
- commands for Accessing running containers
  attach, exec


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




example: To start a container with terminal attached inside the container

syntax: docker run --name <container_name> -it <imagename>
        docker run --name c1 -it amazonlinux

# above command apart from creating container c1, it will also open terminal (-it) inside the c1
  
to come out of this container c1 back to dockerhost we have 2 options
      1. exit --> container will gets moved into exited state
      2. ctrl p + q --> container will be in running state  

to go again inside container from docker host is :
==>  docker exec -it <container_id_or_name> /bin/bash



Important feature of docker containers:
---------------------------------------

1. docker works on process isolation

2. when a docker container is deleted ==>all files / data inside the container will also get deleted by default 

(to be continued.....)


Note:
-----
To come-out from running container without exiting
press Ctrl +p  Ctrl +q  ==> it will run your container in background without stopping exit from container


---------------------------------------------------------------------------------------------



What are docker tags?
- Tags contains information about version of a docker image
   syntax <imagename>:<tagname>
  
  eg:
     1. if you run below command docker will take tag as default tag(i.e latest) even if you dont mention the tag
    	docker pull amazonlinux
     
     2. if we want to download specific version of image we can mention tag along with image name
	to download docker image with tag 2, we can run below command
	     docker pull amazonlinux:2



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

commands for checking information / details of containers:
----------------------------------------------------------

 - To see the logs generated by a container 
    docker logs <container_name/container_id> 


 - To get detailed info about a container 
    docker inspect <container_name/container_id>
              (or)
    docker inspect <image_name/image_id>

 	
	
 Note:  
      docker inspect provides information about the specified container, such as its ID, name, configuration, network settings, volume mounts, and much more.This information can be helpful for troubleshooting, understanding how a container is set up.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	




			  


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


How can we get docker images?
----------------------------
from docker hub

1. DockerHub --> we can download / pull images of our choice from dockerhub
by creating our own custom images
2. we can create image from any of our running container.
3. we can write a file called as Dockerfile & we can create our own dockerimage 




Docker volumes:
---------------
by-default, when a docker container is deleted / exited, all files that was there inside the containers will also get deleted permananetly. 


Volumes are a mechanism for storing data outside containers.
Docker volumes provide persistent storage for our containers.
All volumes are managed by Docker and stored in a dedicated directory on your host, usually /var/lib/docker/volumes/<volume_name>/_data


by using docker volumes we can store the important files present in container, so that even if container gets deleted/removed permanently, we would still be still having these files stored in our docker host.

also by using docker volumes we can use share these stored files with other containers as well.

#Docker volume commands:
1. to create volume
syntax: docker volume create <volume_name>

2. to list volumes
syntax: docker volume ls

(to be continued.....)

 



