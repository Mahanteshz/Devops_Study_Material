1. To change server name as docker:
==> hostnamectl set-hostname docker

2. To switch to root user:
==> sudo su -   or  sudo -i

3. To install docker run these below commands:
==> curl -fsSL https://get.docker.com -o get-docker.sh
==> sh get-docker.sh

4. To check docker version:
==> docker -v or docker --version

5. To download Docker image:
==> docker pull <image_name>

6. To create a container:
==> docker run --name  <container_name> <image_name>

7. To see the list of docker images:
==> docker image ls  or docker images 

8. To see the list of docker containers:
==> docker container ls or docker ps or docker ps -a

9. To delete a docker image:
==> docker rmi -f <image_name / image_id>

10. To delete a docker container:
==> docker rm -f <container name / container ID>

11. To login to docker hub from host server:
==> docker login -u <username>

12. To upload a docker image into docker hub:
==> docker push <image_name>

13. To Start jenkins container in detached mode, name of the container is "dev_container" and perform port mapping:
==> docker run --name dev_container -p 4040:8080 -d  jenkins/jenkins 

14. To create a amazonlinux container with interactive mode & create a environment variable & print variable value inside the container:
==> docker run -it --name amazonlinux_container -e MY_VARIABLE="Hello, Manthu" amazonlinux /bin/bash

15. If you are inside container terminal, then you want exit container without stopping the container:
==> (ctrl) + (p) + (q)

16. If you are inside container terminal, then you want exit container
==> exit

17. To start a container with terminal attached inside the container:
==> docker run --name <container_name> -it <imagename>

18. To go again inside container from docker host:
==> docker attach <container_id_or_name>

19. To run a commands in a container from docker host, without going inside the container terminal:
==> docker exec -it <container_id_or_name> touch file1 file2 file3

20. To tag the docker images, so that we can able to push to dockerhub:
==> docker tag <image-name> <docker_user_name>/<image-name>

21. To see the logs generated by a container:
==> docker logs <container_name/id>

22. To get detailed info about a container and image:
==> docker inspect <container_name/container_id>
==> docker inspect <image_name/image_id>

23. To create Docker volume:
==> docker volume create <volume_name>

24. To list Docker volumes:
==> docker volume ls

25. To create a container with volume mounting along with docker run command:
==> docker run --name c1 -v <volume_name>:<important_dir_path_in_container> -it ubuntu
==> docker run --name c1 -v myvol:/opt/myimportantdirectory -it ubuntu

26. To inspect docker volume:
==> docker volume inspect <volume_name>

27. To delete docker volume:
==> docker volume rm <volume_name>

28. To verify the changes we have made in the container incomparison with original image:
==> docker diff <ContainerID or ContainerNAME>

29. To create image out of from our own modified container:
==> docker commit <ContainerID or ContainerNAME>  <new_image_name>:<tag>

30. To create/build image from a Dockerfile:
==> docker build -t <image_name>:<tag> .
Note: at the end of command need to mention (.) to identify the Dockerfile in a current directory, for the best practices create Dockerfile in separate directory

31. To check default process of a running container:
==> docker ps -qa

32. To copy files from docker host to already running container:
==> docker cp /home/user/documents/example.txt <container_name/id>:/app

33. To create a container in host network:
==> docker run --name c1 --network host <image_name/id>

34. To create a container in none network:
==> docker run --name c1 --network none <image_name/id>
Note: None network is completely isolated network, By default it will create container in bridge network if you don't specify any network.

35. To Create 2nd container c2 and establish link to c1 container:
==> docker run --name c2 --link c1:mylink1 -it <image_name/id>

36. To check link is established or not from container c2:
==> ping c1